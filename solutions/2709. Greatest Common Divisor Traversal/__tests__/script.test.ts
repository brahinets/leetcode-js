import {canTraverseAllPairs} from '../script'

describe('2709. Greatest Common Divisor Traversal', (): void => {

    it('Has path', (): void => {
        expect(canTraverseAllPairs([2, 3, 6]))
            .toBe(true)
    })

    it('Has path as well', (): void => {
        expect(canTraverseAllPairs([4, 3, 12, 8]))
            .toBe(true)
    })

    it('No path', (): void => {
        expect(canTraverseAllPairs([3, 9, 5]))
            .toBe(false)
    })

    it('Load test', (): void => {
        expect(canTraverseAllPairs([15, 70, 70, 90, 60, 66, 42, 78, 30, 77, 70, 77, 78, 42, 60, 35, 35, 20, 52, 33, 77, 77, 30, 33, 21, 15, 66, 70, 99]))
            .toBe(true)
    })

    it('Load test #2', (): void => {
        expect(canTraverseAllPairs([35, 42, 30, 26, 26, 33, 44, 33, 30, 12, 35, 30, 39, 30, 42, 14, 21, 15, 30, 40, 20, 42, 40, 20, 42, 35, 10, 35, 45, 35, 30, 49, 42, 44, 33, 21, 30, 30, 35, 30, 42, 42, 33, 30, 30, 15, 30]))
            .toBe(true)
    })

    it('Load test #3', (): void => {
        expect(canTraverseAllPairs([30, 35, 30, 35, 26, 30, 50, 15, 30, 35, 30, 15, 21, 30, 30, 21, 42, 22, 42, 40, 42, 42, 42, 35, 30, 14, 14, 42, 30, 42, 45, 22, 30, 42, 30, 30, 35, 22, 24, 50, 39, 42, 42, 11, 13, 6, 21]))
            .toBe(true)
    })

    it('Load test #4', (): void => {
        expect(canTraverseAllPairs([880, 918, 180, 715, 385, 840, 930, 770, 364, 825, 420, 924, 150, 195, 585, 78, 312, 858, 87, 966, 990, 840, 210, 5, 105, 542, 312, 770, 231, 429, 770, 294, 240, 660, 726, 756, 858, 252, 195, 195, 455, 210, 426, 858, 990, 975, 273, 975, 462, 78, 420, 237, 525, 630, 495, 975, 380, 341, 190, 840, 210, 110, 143, 825, 561, 260, 616, 377, 770, 429, 924, 585, 429, 512, 770, 150, 420, 506, 154, 715, 462, 792, 330, 770, 308, 840, 627, 546, 962, 330, 546, 840, 669, 910, 740, 385, 660, 770, 385, 330, 546, 910, 770, 462, 706, 572, 165, 105, 924, 396, 616, 546, 728, 770, 930, 910, 715, 990, 546, 440, 495, 924, 770, 165, 735, 330, 825, 462, 39, 715, 210]))
            .toBe(true)
    })

    it('Load test #5', (): void => {
        expect(canTraverseAllPairs([420, 390, 330, 715, 21, 770, 786, 858, 870, 231, 666, 5, 510, 182, 390, 420, 462, 231, 825, 560, 924, 462, 525, 910, 240, 475, 210, 910, 231, 660, 840, 924, 455, 546, 60, 286, 308, 858, 110, 572, 260, 168, 840, 350, 715, 715, 630, 910, 858, 154, 903, 770, 315, 780, 858, 840, 390, 924, 780, 715, 605, 360, 143, 700, 726, 390, 390, 330, 693, 546, 525, 693, 60, 720, 825, 385, 819, 418, 910, 735, 630, 825, 105, 176, 495, 420, 759, 168, 819, 585, 945, 847, 840, 385, 704, 455, 910, 660, 630, 460, 770, 924, 858, 420, 429, 693, 231, 330, 364, 462, 858, 132, 770, 770, 582, 182, 910, 390, 710, 735, 910, 858, 693, 495, 770, 648, 420, 770, 760, 480, 825, 858, 315, 840, 560, 630, 729, 840, 182, 660, 112, 910, 630, 546, 42, 590, 910, 500, 14, 420, 455, 520, 924, 570, 273, 308, 315, 572, 352, 990, 546, 154, 180, 735, 798, 660, 230, 510, 910, 78, 924, 630, 630, 210, 42, 231, 546, 234, 924, 330, 462, 693, 926, 442, 350, 630, 420, 924, 455, 798, 980, 42, 483, 780, 546, 165, 495, 840, 418, 525, 312, 630, 550, 455, 858, 770, 390, 910, 598, 420, 957, 770, 286, 308, 165, 273, 840, 728, 286, 147, 150, 715, 780, 273, 294, 945, 140, 910, 840, 385, 693, 546, 924, 840, 210, 930, 660, 616, 462, 165, 630, 702, 756, 406, 820, 440, 105, 315, 273, 420, 546, 660, 84, 300, 420, 660, 630, 225, 330, 975, 616, 715, 858, 624, 735, 990, 770, 924, 308, 858, 525, 840, 693, 546, 910, 195, 44, 735, 585, 462, 682, 546, 858, 546, 858, 105, 924, 840, 420, 715, 693, 105, 65, 154, 924, 182, 260, 990, 286, 945, 528, 910, 770, 429, 410, 260, 630, 165, 819, 210, 975, 585, 130, 28, 840, 600, 880, 792, 702, 165, 546, 792, 420, 880, 624, 858, 420]))
            .toBe(true)
    })
})
